/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,8],$V1=[1,25],$V2=[1,9],$V3=[1,18],$V4=[1,30],$V5=[1,19],$V6=[1,20],$V7=[1,21],$V8=[1,43],$V9=[1,11],$Va=[1,12],$Vb=[1,13],$Vc=[1,15],$Vd=[1,16],$Ve=[1,17],$Vf=[1,28],$Vg=[1,31],$Vh=[1,42],$Vi=[1,41],$Vj=[1,33],$Vk=[1,34],$Vl=[1,35],$Vm=[1,36],$Vn=[1,37],$Vo=[1,38],$Vp=[1,39],$Vq=[1,40],$Vr=[1,24],$Vs=[1,26],$Vt=[1,27],$Vu=[1,29],$Vv=[5,11,12,14,15,16,20,24,25,26,38,40,41,43,46,47,48,51,53,62,67,75,76,77,78,79,80,81,85,86,87,88],$Vw=[2,53],$Vx=[1,52],$Vy=[5,11,12,14,15,16,20,24,25,26,28,38,40,41,43,46,47,48,51,53,62,67,75,76,77,78,79,80,81,85,86,87,88],$Vz=[1,57],$VA=[1,60],$VB=[1,62],$VC=[1,64],$VD=[1,63],$VE=[18,22,26,28,30,37,51,52,53,54,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74],$VF=[1,84],$VG=[1,86],$VH=[1,69],$VI=[1,70],$VJ=[1,71],$VK=[1,72],$VL=[1,73],$VM=[1,74],$VN=[1,75],$VO=[1,76],$VP=[1,77],$VQ=[1,78],$VR=[1,79],$VS=[1,80],$VT=[1,81],$VU=[1,82],$VV=[1,83],$VW=[1,85],$VX=[1,87],$VY=[1,88],$VZ=[1,89],$V_=[1,90],$V$=[1,91],$V01=[2,111],$V11=[1,106],$V21=[2,50],$V31=[28,30],$V41=[2,96],$V51=[1,111],$V61=[1,112],$V71=[1,114],$V81=[5,11,12,14,15,16,18,20,22,24,25,26,28,30,37,38,40,41,43,46,47,48,49,51,52,53,54,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,85,86,87,88],$V91=[18,30],$Va1=[18,22,26,28,30,37,51,53,54,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74],$Vb1=[1,166],$Vc1=[18,30,63],$Vd1=[1,168],$Ve1=[18,30,54],$Vf1=[1,170],$Vg1=[1,176],$Vh1=[12,15,16,26,28,38,40,41,43,46,47,48,51,53,62,67,75,76,77,78,79,80,81,85,86,87,88],$Vi1=[18,26,28,30,37,53,54],$Vj1=[18,26,28,30,37,53,54,56,57,58,59,60,61],$Vk1=[18,26,28,30,37,53,54,56,57,58,59,60,61,62,63,64,65],$Vl1=[18,26,28,30,37,51,53,54,56,57,58,59,60,61,62,63,64,65,66,67,70,71,72,73,74],$Vm1=[18,26,28,30,37,51,53,54,56,57,58,59,60,61,62,63,64,65,70,71,72,73,74],$Vn1=[15,20,28],$Vo1=[1,221];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"start":3,"decl_list":4,"EOF":5,"decl":6,"stmt":7,"fn_decl":8,"class_decl":9,"datablock_decl":10,"package":11,"var_local":12,"block_fn_only":13,"active":14,"fn":15,"(":16,"ident_list":17,")":18,"block":19,"scoped":20,"::":21,"/":22,"fn_decl_list":23,"class":24,"data":25,"{":26,"datablock_pair_list":27,"}":28,"datablock_pair":29,",":30,"state":31,"map_pair_list":32,"map_pair":33,"block_non_empty":34,"stmt_list":35,"stmt_expr":36,";":37,"return":38,"expr":39,"break":40,"continue":41,"if_stmt":42,"for":43,"var":44,"in":45,"while":46,"loop":47,"if":48,"else":49,"expr_list":50,"@":51,".":52,"[":53,"]":54,"constant_value":55,"&&":56,"||":57,"==":58,"!=":59,"$=":60,"!$=":61,"<":62,">":63,"<=":64,">=":65,"+":66,"-":67,"*":68,"%":69,"SPC":70,"TAB":71,"NL":72,"..":73,"...":74,"!":75,"~":76,"integer":77,"float":78,"string":79,"tagged_string":80,"boolean":81,"=>":82,":":83,"=":84,"macro_name":85,"ts_fence":86,"new":87,"var_global":88,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",11:"package",12:"var_local",14:"active",15:"fn",16:"(",18:")",20:"scoped",21:"::",22:"/",24:"class",25:"data",26:"{",28:"}",30:",",31:"state",37:";",38:"return",40:"break",41:"continue",43:"for",45:"in",46:"while",47:"loop",48:"if",49:"else",51:"@",52:".",53:"[",54:"]",56:"&&",57:"||",58:"==",59:"!=",60:"$=",61:"!$=",62:"<",63:">",64:"<=",65:">=",66:"+",67:"-",68:"*",69:"%",70:"SPC",71:"TAB",72:"NL",73:"..",74:"...",75:"!",76:"~",77:"integer",78:"float",79:"string",80:"tagged_string",81:"boolean",82:"=>",83:":",84:"=",85:"macro_name",86:"ts_fence",87:"new",88:"var_global"},
productions_: [0,[3,2],[4,1],[4,2],[6,1],[6,1],[6,1],[6,1],[6,3],[6,4],[8,6],[8,5],[8,7],[8,3],[8,8],[8,7],[8,5],[8,7],[8,6],[8,4],[23,1],[23,2],[9,3],[10,6],[27,1],[27,3],[29,5],[29,1],[19,2],[19,1],[34,3],[13,2],[13,3],[35,1],[35,2],[7,2],[7,2],[7,3],[7,2],[7,2],[7,1],[7,5],[7,7],[7,3],[7,2],[42,5],[42,5],[42,3],[17,1],[17,3],[50,0],[50,1],[50,3],[39,1],[39,3],[39,1],[39,2],[39,3],[39,4],[39,1],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,2],[39,2],[39,2],[55,1],[55,1],[55,1],[55,1],[55,1],[55,4],[55,5],[55,3],[55,4],[55,5],[55,3],[55,3],[32,0],[32,1],[32,3],[33,3],[33,3],[36,3],[36,5],[36,6],[36,4],[36,4],[36,6],[36,6],[36,1],[36,5],[36,6],[44,1],[44,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2: case 20: case 24: case 33: case 48: case 51: case 97:
 this.$ = [$$[$0]]; 
break;
case 3: case 21: case 34:
 this.$ = $$[$0-1]; $$[$0-1].push($$[$0]); 
break;
case 4: case 5: case 6: case 7: case 27: case 29: case 40: case 53: case 55: case 59:
 this.$ = $$[$0]; 
break;
case 8:
 this.$ = {type: "package-decl", name: $$[$0-1], body: $$[$0], active: false}; 
break;
case 9:
 this.$ = {type: "package-decl", name: $$[$0-1], body: $$[$0], active: true}; 
break;
case 10:
 this.$ = {type: "fn-stmt", name: $$[$0-4], args: $$[$0-2], body: $$[$0]}; 
break;
case 11:
 this.$ = {type: "fn-stmt", name: $$[$0-3], args: [], body: $$[$0]}; 
break;
case 12:
 this.$ = {type: "fn-stmt", name: $$[$0-4], args: $$[$0-2], body: $$[$0], scoped: true}; 
break;
case 13:
 this.$ = {type: "fn-stmt", name: $$[$0-1], args: [], body: $$[$0]}; 
break;
case 14:
 this.$ = {type: "fn-stmt", name: $$[$0-6] + $$[$0-5] + $$[$0-4], args: $$[$0-2], body: $$[$0]}; 
break;
case 15:
 this.$ = {type: "fn-stmt", name: $$[$0-5] + $$[$0-4] + $$[$0-3], args: [], body: $$[$0]}; 
break;
case 16:
 this.$ = {type: "fn-stmt", name: $$[$0-3] + $$[$0-2] + $$[$0-1], args: [], body: $$[$0]}; 
break;
case 17:

            $$[$0-2].unshift("client");
            this.$ = {type: "fn-stmt", name: "serverCmd" + $$[$0-4], args: $$[$0-2], body: $$[$0]}; 
break;
case 18:
 this.$ = {type: "fn-stmt", name: "serverCmd" + $$[$0-3], args: ["client"], body: $$[$0]}; 
break;
case 19:
 this.$ = {type: "fn-stmt", name: "serverCmd" + $$[$0-1], args: ["client"], body: $$[$0]}; 
break;
case 22:
 this.$ = {type: "class-decl", name: $$[$0-1], body: $$[$0]}; 
break;
case 23:
 this.$ = {type: "datablock-decl", datatype: $$[$0-4], name: $$[$0-3], body: $$[$0-1]}; 
break;
case 25: case 49: case 52: case 98:
 this.$ = $$[$0-2]; $$[$0-2].push($$[$0]); 
break;
case 26:
 this.$ = { type: "state-decl", name: $$[$0-3], data: $$[$0-1] }; 
break;
case 28: case 31: case 50: case 96:
 this.$ = []; 
break;
case 30: case 32:
 this.$ = $$[$0-1]; 
break;
case 35:
 this.$ = {type: "expr-stmt", expr: $$[$0-1]}; 
break;
case 36:
 this.$ = {type: "return-stmt", expr: null}; 
break;
case 37:
 this.$ = {type: "return-stmt", expr: $$[$0-1]}; 
break;
case 38:
 this.$ = {type: "break-stmt"}; 
break;
case 39:
 this.$ = {type: "continue-stmt"}; 
break;
case 41:
 this.$ = {type: "foreach-stmt", "bind": $$[$0-3], "iter": $$[$0-1], body: $$[$0]}; 
break;
case 42:
 this.$ = {type: "foreach-stmt", "bind": $$[$0-5], "iter": $$[$0-3], body: $$[$0-2]}; 
break;
case 43:
 this.$ = {type: "while-stmt", "cond": $$[$0-1], body: $$[$0]}; 
break;
case 44:
 this.$ = {type: "loop-stmt", body: $$[$0]}; 
break;
case 45: case 46:
 this.$ = {type: "if-stmt", "cond": $$[$0-3], body: $$[$0-2], "else": $$[$0]}; 
break;
case 47:
 this.$ = {type: "if-stmt", "cond": $$[$0-1], body: $$[$0], "else": null}; 
break;
case 54:
 this.$ = {type: "expr-expr", expr: $$[$0-1]}; 
break;
case 56:
 this.$ = {type: "identifier", name: $$[$0]}; 
break;
case 57:
 this.$ = {type: "field-get", expr: $$[$0-2], name: $$[$0]}; 
break;
case 58:
 this.$ = {type: "array-get", expr: $$[$0-3], "array": $$[$0-1]}; 
break;
case 60: case 61: case 62: case 63: case 64: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78:
 this.$ = {type: "binary", op: $$[$0-1], lhs: $$[$0-2], rhs: $$[$0]}; 
break;
case 79:

            this.$ = {
                type: "call",
                name: "range",
                args: [$$[$0-2], $$[$0]]
            };
        
break;
case 80:

            this.$ = {
                type: "call",
                name: "range",
                args: [
                    $$[$0-2],
                    {
                        type: "binary",
                        op: "+",
                        lhs: $$[$0],
                        rhs: {
                            type: "constant",
                            "what": "integer",
                            "value": "1"
                        }
                    }
                ]
            };
        
break;
case 81: case 82: case 83:
 this.$ = {type: "unary", op: $$[$0-1], expr: $$[$0]}; 
break;
case 84:
 this.$ = {type: "constant", what: "integer", value: $$[$0]}; 
break;
case 85:
 this.$ = {type: "constant", what: "float", value: $$[$0]}; 
break;
case 86:
 this.$ = {type: "constant", what: "string", value: $$[$0].substring(1, $$[$0].length-1)}; 
break;
case 87:
 this.$ = {type: "constant", what: "tagged_string", value: $$[$0].substring(1, $$[$0].length-1)}; 
break;
case 88:
 this.$ = {type: "constant", what: "boolean", value: $$[$0]}; 
break;
case 89:
 this.$ = {type: "lambda", args: [], body: $$[$0]}; 
break;
case 90:
 this.$ = {type: "lambda", args: $$[$0-2], body: $$[$0]}; 
break;
case 91:
 this.$ = {type: "lambda", args: [$$[$0-2]], body: [{type: "return-stmt", expr: $$[$0]}]}; 
break;
case 92:
 this.$ = {type: "lambda", args: [], body: [{type: "return-stmt", expr: $$[$0]}]}; 
break;
case 93:
 this.$ = {type: "lambda", args: $$[$0-3], body: [{type: "return-stmt", expr: $$[$0]}]}; 
break;
case 94:
 this.$ = {type: "create-vec", values: $$[$0-1]}; 
break;
case 95:
 this.$ = {type: "create-map", pairs: $$[$0-1]}; 
break;
case 99:
 this.$ = [{type: "constant", what: "string", value: $$[$0-2]}, $$[$0]]; 
break;
case 100:
 this.$ = [{type: "constant", what: "string", value: $$[$0-2].substring(1, $$[$0-2].length-1)}, $$[$0]]; 
break;
case 101:
 this.$ = {type: "assign", "var": $$[$0-2], rhs: $$[$0]}; 
break;
case 102:
 this.$ = {type: "field-set", expr: $$[$0-4], name: $$[$0-2], rhs: $$[$0]}; 
break;
case 103:
 this.$ = {type: "array-set", expr: $$[$0-5], "array": $$[$0-3], rhs: $$[$0]}; 
break;
case 104:
 this.$ = {type: "macro-call", name: $$[$0-3], args: $$[$0-1]}; 
break;
case 105: case 110:
 this.$ = {type: "call", name: $$[$0-3], args: $$[$0-1]}; 
break;
case 106:
 this.$ = {type: "call", name: $$[$0-3], scope: $$[$0-5], args: $$[$0-1]}; 
break;
case 107:
 this.$ = {type: "call", name: $$[$0-3], target: $$[$0-5], args: $$[$0-1]}; 
break;
case 108:
 this.$ = {type: "ts-fence-expr", code: $$[$0].substring(1, $$[$0].length-1)}; 
break;
case 109:
 this.$ = {type: "new-object", class: $$[$0-3], args: $$[$0-1]}; 
break;
case 111:
 this.$ = {type: "variable", global: false, name: $$[$0]}; 
break;
case 112:
 this.$ = {type: "variable", global: true, name: $$[$0].substr(1)}; 
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:$V0,12:$V1,14:$V2,15:$V3,16:$V4,20:$V5,24:$V6,25:$V7,26:$V8,36:10,38:$V9,39:23,40:$Va,41:$Vb,42:14,43:$Vc,44:22,46:$Vd,47:$Ve,48:$Vf,51:$Vg,53:$Vh,55:32,62:$Vi,67:$Vj,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo,80:$Vp,81:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},{1:[3]},{5:[1,44],6:45,7:4,8:5,9:6,10:7,11:$V0,12:$V1,14:$V2,15:$V3,16:$V4,20:$V5,24:$V6,25:$V7,26:$V8,36:10,38:$V9,39:23,40:$Va,41:$Vb,42:14,43:$Vc,44:22,46:$Vd,47:$Ve,48:$Vf,51:$Vg,53:$Vh,55:32,62:$Vi,67:$Vj,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo,80:$Vp,81:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},o($Vv,[2,2]),o($Vv,[2,4]),o($Vv,[2,5]),o($Vv,[2,6]),o($Vv,[2,7]),{12:[1,46]},{11:[1,47]},o([22,51,52,53,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74],$Vw,{37:[1,48]}),{12:$V1,15:$Vx,16:$V4,26:$V8,36:51,37:[1,49],39:50,44:22,51:$Vg,53:$Vh,55:32,62:$Vi,67:$Vj,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo,80:$Vp,81:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},{37:[1,53]},{37:[1,54]},o($Vy,[2,40]),{12:$Vz,16:[1,56],44:55,88:$Vu},{12:$V1,15:$Vx,16:$V4,26:$V8,36:51,39:58,44:22,51:$Vg,53:$Vh,55:32,62:$Vi,67:$Vj,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo,80:$Vp,81:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},{19:59,26:$VA,34:61},{12:$VB,16:$VC,22:$VD},{15:[1,65]},{12:[1,66]},{12:[1,67]},o($VE,[2,55],{84:[1,68]}),{22:$VF,51:$VG,52:$VH,53:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT,67:$VU,68:$VV,69:$VW,70:$VX,71:$VY,72:$VZ,73:$V_,74:$V$},{16:[1,92]},o([18,22,26,28,30,37,51,52,53,54,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,84],$V01,{16:[1,93],21:[1,94],82:[1,95]}),o($VE,[2,108]),{12:[1,96],24:[1,97]},{12:$V1,15:$Vx,16:$V4,26:$V8,36:51,39:98,44:22,51:$Vg,53:$Vh,55:32,62:$Vi,67:$Vj,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo,80:$Vp,81:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},o([18,22,26,28,30,37,45,51,52,53,54,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,84],[2,112]),{12:$V1,15:$Vx,16:$V4,18:[1,100],26:$V8,36:51,39:99,44:22,51:$Vg,53:$Vh,55:32,62:$Vi,67:$Vj,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo,80:$Vp,81:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},{12:[1,101]},o($VE,[2,59]),{12:$V1,15:$Vx,16:$V4,26:$V8,36:51,39:102,44:22,51:$Vg,53:$Vh,55:32,62:$Vi,67:$Vj,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo,80:$Vp,81:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},{12:$V1,15:$Vx,16:$V4,26:$V8,36:51,39:103,44:22,51:$Vg,53:$Vh,55:32,62:$Vi,67:$Vj,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo,80:$Vp,81:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},{12:$V1,15:$Vx,16:$V4,26:$V8,36:51,39:104,44:22,51:$Vg,53:$Vh,55:32,62:$Vi,67:$Vj,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo,80:$Vp,81:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},o($VE,[2,84]),o($VE,[2,85]),o($VE,[2,86]),o($VE,[2,87]),o($VE,[2,88]),{12:$V11,17:105},o([30,54],$V21,{44:22,55:32,36:51,50:107,39:108,12:$V1,15:$Vx,16:$V4,26:$V8,51:$Vg,53:$Vh,62:$Vi,67:$Vj,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo,80:$Vp,81:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu}),o($V31,$V41,{32:109,33:110,12:$V51,79:$V61}),{1:[2,1]},o($Vv,[2,3]),{13:113,26:$V71},{12:[1,115]},o($Vy,[2,35]),o($Vy,[2,36]),{22:$VF,37:[1,116],51:$VG,52:$VH,53:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT,67:$VU,68:$VV,69:$VW,70:$VX,71:$VY,72:$VZ,73:$V_,74:$V$},o($VE,$Vw),{16:$VC},o($Vy,[2,38]),o($Vy,[2,39]),{45:[1,117]},{12:$Vz,44:118,88:$Vu},{45:$V01},{19:119,22:$VF,26:$VA,34:61,51:$VG,52:$VH,53:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT,67:$VU,68:$VV,69:$VW,70:$VX,71:$VY,72:$VZ,73:$V_,74:$V$},o($Vy,[2,44]),{7:122,12:$V1,15:$Vx,16:$V4,26:$V8,28:[1,120],35:121,36:10,38:$V9,39:23,40:$Va,41:$Vb,42:14,43:$Vc,44:22,46:$Vd,47:$Ve,48:$Vf,51:$Vg,53:$Vh,55:32,62:$Vi,67:$Vj,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo,80:$Vp,81:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},o($V81,[2,29]),{16:[1,123],19:124,21:[1,125],26:$VA,34:61},{12:[1,126]},{12:$V11,17:128,18:[1,127]},{12:[1,129]},{13:130,26:$V71},{12:[1,131]},{12:$V1,15:$Vx,16:$V4,26:$V8,36:51,39:132,44:22,51:$Vg,53:$Vh,55:32,62:$Vi,67:$Vj,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo,80:$Vp,81:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},{12:[1,133]},{12:$V1,15:$Vx,16:$V4,26:$V8,36:51,39:134,44:22,51:$Vg,53:$Vh,55:32,62:$Vi,67:$Vj,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo,80:$Vp,81:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},{12:$V1,15:$Vx,16:$V4,26:$V8,36:51,39:135,44:22,51:$Vg,53:$Vh,55:32,62:$Vi,67:$Vj,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo,80:$Vp,81:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},{12:$V1,15:$Vx,16:$V4,26:$V8,36:51,39:136,44:22,51:$Vg,53:$Vh,55:32,62:$Vi,67:$Vj,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo,80:$Vp,81:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},{12:$V1,15:$Vx,16:$V4,26:$V8,36:51,39:137,44:22,51:$Vg,53:$Vh,55:32,62:$Vi,67:$Vj,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo,80:$Vp,81:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},{12:$V1,15:$Vx,16:$V4,26:$V8,36:51,39:138,44:22,51:$Vg,53:$Vh,55:32,62:$Vi,67:$Vj,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo,80:$Vp,81:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},{12:$V1,15:$Vx,16:$V4,26:$V8,36:51,39:139,44:22,51:$Vg,53:$Vh,55:32,62:$Vi,67:$Vj,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo,80:$Vp,81:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},{12:$V1,15:$Vx,16:$V4,26:$V8,36:51,39:140,44:22,51:$Vg,53:$Vh,55:32,62:$Vi,67:$Vj,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo,80:$Vp,81:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},{12:$V1,15:$Vx,16:$V4,26:$V8,36:51,39:141,44:22,51:$Vg,53:$Vh,55:32,62:$Vi,67:$Vj,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo,80:$Vp,81:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},{12:$V1,15:$Vx,16:$V4,26:$V8,36:51,39:142,44:22,51:$Vg,53:$Vh,55:32,62:$Vi,67:$Vj,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo,80:$Vp,81:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},{12:$V1,15:$Vx,16:$V4,26:$V8,36:51,39:143,44:22,51:$Vg,53:$Vh,55:32,62:$Vi,67:$Vj,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo,80:$Vp,81:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},{12:$V1,15:$Vx,16:$V4,26:$V8,36:51,39:144,44:22,51:$Vg,53:$Vh,55:32,62:$Vi,67:$Vj,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo,80:$Vp,81:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},{12:$V1,15:$Vx,16:$V4,26:$V8,36:51,39:145,44:22,51:$Vg,53:$Vh,55:32,62:$Vi,67:$Vj,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo,80:$Vp,81:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},{12:$V1,15:$Vx,16:$V4,26:$V8,36:51,39:146,44:22,51:$Vg,53:$Vh,55:32,62:$Vi,67:$Vj,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo,80:$Vp,81:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},{12:$V1,15:$Vx,16:$V4,26:$V8,36:51,39:147,44:22,51:$Vg,53:$Vh,55:32,62:$Vi,67:$Vj,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo,80:$Vp,81:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},{12:$V1,15:$Vx,16:$V4,26:$V8,36:51,39:148,44:22,51:$Vg,53:$Vh,55:32,62:$Vi,67:$Vj,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo,80:$Vp,81:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},{12:$V1,15:$Vx,16:$V4,26:$V8,36:51,39:149,44:22,51:$Vg,53:$Vh,55:32,62:$Vi,67:$Vj,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo,80:$Vp,81:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},{12:$V1,15:$Vx,16:$V4,26:$V8,36:51,39:150,44:22,51:$Vg,53:$Vh,55:32,62:$Vi,67:$Vj,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo,80:$Vp,81:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},{12:$V1,15:$Vx,16:$V4,26:$V8,36:51,39:151,44:22,51:$Vg,53:$Vh,55:32,62:$Vi,67:$Vj,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo,80:$Vp,81:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},{12:$V1,15:$Vx,16:$V4,26:$V8,36:51,39:152,44:22,51:$Vg,53:$Vh,55:32,62:$Vi,67:$Vj,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo,80:$Vp,81:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},{12:$V1,15:$Vx,16:$V4,26:$V8,36:51,39:153,44:22,51:$Vg,53:$Vh,55:32,62:$Vi,67:$Vj,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo,80:$Vp,81:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},{12:$V1,15:$Vx,16:$V4,26:$V8,36:51,39:154,44:22,51:$Vg,53:$Vh,55:32,62:$Vi,67:$Vj,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo,80:$Vp,81:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},{12:$V1,15:$Vx,16:$V4,26:$V8,36:51,39:155,44:22,51:$Vg,53:$Vh,55:32,62:$Vi,67:$Vj,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo,80:$Vp,81:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},o($V91,$V21,{44:22,55:32,36:51,39:108,50:156,12:$V1,15:$Vx,16:$V4,26:$V8,51:$Vg,53:$Vh,62:$Vi,67:$Vj,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo,80:$Vp,81:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu}),o($V91,$V21,{44:22,55:32,36:51,39:108,50:157,12:$V1,15:$Vx,16:$V4,26:$V8,51:$Vg,53:$Vh,62:$Vi,67:$Vj,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo,80:$Vp,81:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu}),{12:[1,158]},{12:$V1,15:$Vx,16:$V4,26:$V8,36:51,39:159,44:22,51:$Vg,53:$Vh,55:32,62:$Vi,67:$Vj,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo,80:$Vp,81:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},{16:[1,160]},{12:[1,161]},{19:162,22:$VF,26:$VA,34:61,51:$VG,52:$VH,53:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT,67:$VU,68:$VV,69:$VW,70:$VX,71:$VY,72:$VZ,73:$V_,74:$V$},{18:[1,163],22:$VF,51:$VG,52:$VH,53:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT,67:$VU,68:$VV,69:$VW,70:$VX,71:$VY,72:$VZ,73:$V_,74:$V$},{82:[1,164]},o($VE,[2,56]),o($Va1,[2,81],{52:$VH}),o($Va1,[2,82],{52:$VH}),o($Va1,[2,83],{52:$VH}),{30:$Vb1,63:[1,165]},o($Vc1,[2,48]),{30:$Vd1,54:[1,167]},o($Ve1,[2,51],{22:$VF,51:$VG,52:$VH,53:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT,67:$VU,68:$VV,69:$VW,70:$VX,71:$VY,72:$VZ,73:$V_,74:$V$}),{28:[1,169],30:$Vf1},o($V31,[2,97]),{83:[1,171]},{83:[1,172]},o($Vv,[2,8]),{8:175,15:$Vg1,20:$V5,23:174,28:[1,173]},{13:177,26:$V71},o($Vy,[2,37]),{12:$V1,15:$Vx,16:$V4,26:$V8,36:51,39:178,44:22,51:$Vg,53:$Vh,55:32,62:$Vi,67:$Vj,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo,80:$Vp,81:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},{45:[1,179]},o($Vy,[2,43]),o($V81,[2,28]),{7:181,12:$V1,15:$Vx,16:$V4,26:$V8,28:[1,180],36:10,38:$V9,39:23,40:$Va,41:$Vb,42:14,43:$Vc,44:22,46:$Vd,47:$Ve,48:$Vf,51:$Vg,53:$Vh,55:32,62:$Vi,67:$Vj,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo,80:$Vp,81:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},o($Vh1,[2,33]),{12:$V11,17:182,18:[1,183]},o($Vy,[2,13]),{12:[1,184]},{16:[1,185],19:186,26:$VA,34:61},{19:187,26:$VA,34:61},{18:[1,188],30:$Vb1},{16:[1,189]},o($Vv,[2,22]),{26:[1,190]},o($Vi1,[2,101],{22:$VF,51:$VG,52:$VH,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT,67:$VU,68:$VV,69:$VW,70:$VX,71:$VY,72:$VZ,73:$V_,74:$V$}),o($VE,[2,57],{16:[1,192],84:[1,191]}),{22:$VF,51:$VG,52:$VH,53:$VI,54:[1,193],56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT,67:$VU,68:$VV,69:$VW,70:$VX,71:$VY,72:$VZ,73:$V_,74:$V$},o([18,26,28,30,37,53,54,56,57],[2,60],{22:$VF,51:$VG,52:$VH,58:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT,67:$VU,68:$VV,69:$VW,70:$VX,71:$VY,72:$VZ,73:$V_,74:$V$}),o([18,26,28,30,37,53,54,57],[2,61],{22:$VF,51:$VG,52:$VH,56:$VJ,58:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT,67:$VU,68:$VV,69:$VW,70:$VX,71:$VY,72:$VZ,73:$V_,74:$V$}),o($Vj1,[2,62],{22:$VF,51:$VG,52:$VH,62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT,67:$VU,68:$VV,69:$VW,70:$VX,71:$VY,72:$VZ,73:$V_,74:$V$}),o($Vj1,[2,63],{22:$VF,51:$VG,52:$VH,62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT,67:$VU,68:$VV,69:$VW,70:$VX,71:$VY,72:$VZ,73:$V_,74:$V$}),o($Vj1,[2,64],{22:$VF,51:$VG,52:$VH,62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT,67:$VU,68:$VV,69:$VW,70:$VX,71:$VY,72:$VZ,73:$V_,74:$V$}),o($Vj1,[2,65],{22:$VF,51:$VG,52:$VH,62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT,67:$VU,68:$VV,69:$VW,70:$VX,71:$VY,72:$VZ,73:$V_,74:$V$}),o($Vk1,[2,66],{22:$VF,51:$VG,52:$VH,66:$VT,67:$VU,68:$VV,69:$VW,70:$VX,71:$VY,72:$VZ,73:$V_,74:$V$}),o($Vk1,[2,67],{22:$VF,51:$VG,52:$VH,66:$VT,67:$VU,68:$VV,69:$VW,70:$VX,71:$VY,72:$VZ,73:$V_,74:$V$}),o($Vk1,[2,68],{22:$VF,51:$VG,52:$VH,66:$VT,67:$VU,68:$VV,69:$VW,70:$VX,71:$VY,72:$VZ,73:$V_,74:$V$}),o($Vk1,[2,69],{22:$VF,51:$VG,52:$VH,66:$VT,67:$VU,68:$VV,69:$VW,70:$VX,71:$VY,72:$VZ,73:$V_,74:$V$}),o($Vl1,[2,70],{22:$VF,52:$VH,68:$VV,69:$VW}),o($Vl1,[2,71],{22:$VF,52:$VH,68:$VV,69:$VW}),o($Va1,[2,72],{52:$VH}),o($Va1,[2,73],{52:$VH}),o($Va1,[2,74],{52:$VH}),o($Vm1,[2,75],{22:$VF,52:$VH,66:$VT,67:$VU,68:$VV,69:$VW}),o($Vm1,[2,76],{22:$VF,52:$VH,66:$VT,67:$VU,68:$VV,69:$VW}),o($Vm1,[2,77],{22:$VF,52:$VH,66:$VT,67:$VU,68:$VV,69:$VW}),o($Vm1,[2,78],{22:$VF,52:$VH,66:$VT,67:$VU,68:$VV,69:$VW}),o($Vm1,[2,79],{22:$VF,52:$VH,66:$VT,67:$VU,68:$VV,69:$VW}),o($Vm1,[2,80],{22:$VF,52:$VH,66:$VT,67:$VU,68:$VV,69:$VW}),{18:[1,194],30:$Vd1},{18:[1,195],30:$Vd1},{16:[1,196]},o($Vi1,[2,91],{22:$VF,51:$VG,52:$VH,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT,67:$VU,68:$VV,69:$VW,70:$VX,71:$VY,72:$VZ,73:$V_,74:$V$}),o($V91,$V21,{44:22,55:32,36:51,39:108,50:197,12:$V1,15:$Vx,16:$V4,26:$V8,51:$Vg,53:$Vh,62:$Vi,67:$Vj,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo,80:$Vp,81:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu}),{16:[1,198]},o($Vy,[2,47],{49:[1,199]}),o($VE,[2,54]),{12:$V1,15:$Vx,16:$V4,26:$V8,36:51,39:200,44:22,51:$Vg,53:$Vh,55:32,62:$Vi,67:$Vj,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo,80:$Vp,81:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},{82:[1,201]},{12:[1,202]},o($VE,[2,94]),{12:$V1,15:$Vx,16:$V4,26:$V8,36:51,39:203,44:22,51:$Vg,53:$Vh,55:32,62:$Vi,67:$Vj,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo,80:$Vp,81:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},o($VE,[2,95]),{12:$V51,33:204,79:$V61},{12:$V1,15:$Vx,16:$V4,26:$V8,36:51,39:205,44:22,51:$Vg,53:$Vh,55:32,62:$Vi,67:$Vj,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo,80:$Vp,81:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},{12:$V1,15:$Vx,16:$V4,26:$V8,36:51,39:206,44:22,51:$Vg,53:$Vh,55:32,62:$Vi,67:$Vj,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo,80:$Vp,81:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},o($Vv,[2,31]),{8:208,15:$Vg1,20:$V5,28:[1,207]},o($Vn1,[2,20]),{12:$VB,22:$VD},o($Vv,[2,9]),{19:209,22:$VF,26:$VA,34:61,51:$VG,52:$VH,53:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT,67:$VU,68:$VV,69:$VW,70:$VX,71:$VY,72:$VZ,73:$V_,74:$V$},{18:[1,210]},o($V81,[2,30]),o($Vh1,[2,34]),{18:[1,211],30:$Vb1},{19:212,26:$VA,34:61},{16:[1,213],19:214,26:$VA,34:61},{12:$V11,17:215,18:[1,216]},o($Vy,[2,19]),o($VE,[2,89]),{19:217,26:$VA,34:61},{12:$V11,17:218},{12:$V51,27:219,29:220,31:$Vo1,33:222,79:$V61},{12:$V1,15:$Vx,16:$V4,26:$V8,36:51,39:223,44:22,51:$Vg,53:$Vh,55:32,62:$Vi,67:$Vj,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo,80:$Vp,81:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},o($V91,$V21,{44:22,55:32,36:51,39:108,50:224,12:$V1,15:$Vx,16:$V4,26:$V8,51:$Vg,53:$Vh,62:$Vi,67:$Vj,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo,80:$Vp,81:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu}),o($VE,[2,58],{84:[1,225]}),o($VE,[2,104]),o($VE,[2,105]),o($V91,$V21,{44:22,55:32,36:51,39:108,50:226,12:$V1,15:$Vx,16:$V4,26:$V8,51:$Vg,53:$Vh,62:$Vi,67:$Vj,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo,80:$Vp,81:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu}),{18:[1,227],30:$Vd1},o($V91,$V21,{44:22,55:32,36:51,39:108,50:228,12:$V1,15:$Vx,16:$V4,26:$V8,51:$Vg,53:$Vh,62:$Vi,67:$Vj,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo,80:$Vp,81:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu}),{19:230,26:$VA,34:61,42:229,48:$Vf},o($Vi1,[2,92],{22:$VF,51:$VG,52:$VH,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT,67:$VU,68:$VV,69:$VW,70:$VX,71:$VY,72:$VZ,73:$V_,74:$V$}),{12:$V1,15:$Vx,16:$V4,26:$V8,36:51,39:231,44:22,51:$Vg,53:$Vh,55:32,62:$Vi,67:$Vj,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo,80:$Vp,81:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},o($Vc1,[2,49]),o($Ve1,[2,52],{22:$VF,51:$VG,52:$VH,53:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT,67:$VU,68:$VV,69:$VW,70:$VX,71:$VY,72:$VZ,73:$V_,74:$V$}),o($V31,[2,98]),o($V31,[2,99],{22:$VF,51:$VG,52:$VH,53:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT,67:$VU,68:$VV,69:$VW,70:$VX,71:$VY,72:$VZ,73:$V_,74:$V$}),o($V31,[2,100],{22:$VF,51:$VG,52:$VH,53:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT,67:$VU,68:$VV,69:$VW,70:$VX,71:$VY,72:$VZ,73:$V_,74:$V$}),o($Vv,[2,32]),o($Vn1,[2,21]),o($Vy,[2,41]),{12:$V1,15:$Vx,16:$V4,26:$V8,36:51,39:232,44:22,51:$Vg,53:$Vh,55:32,62:$Vi,67:$Vj,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo,80:$Vp,81:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},{19:233,26:$VA,34:61},o($Vy,[2,11]),{12:$V11,17:234,18:[1,235]},o($Vy,[2,16]),{18:[1,236],30:$Vb1},{19:237,26:$VA,34:61},o($VE,[2,90]),{18:[1,238],30:$Vb1},{28:[1,239],30:[1,240]},o($V31,[2,24]),{12:[1,241]},o($V31,[2,27]),o($VE,[2,102]),{18:[1,242],30:$Vd1},{12:$V1,15:$Vx,16:$V4,26:$V8,36:51,39:243,44:22,51:$Vg,53:$Vh,55:32,62:$Vi,67:$Vj,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo,80:$Vp,81:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},{18:[1,244],30:$Vd1},o($VE,[2,109]),{18:[1,245],30:$Vd1},o($Vy,[2,45]),o($Vy,[2,46]),o($Vk1,[2,93],{22:$VF,51:$VG,52:$VH,66:$VT,67:$VU,68:$VV,69:$VW,70:$VX,71:$VY,72:$VZ,73:$V_,74:$V$}),{19:246,22:$VF,26:$VA,34:61,51:$VG,52:$VH,53:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT,67:$VU,68:$VV,69:$VW,70:$VX,71:$VY,72:$VZ,73:$V_,74:$V$},o($Vy,[2,10]),{18:[1,247],30:$Vb1},{19:248,26:$VA,34:61},{19:249,26:$VA,34:61},o($Vy,[2,18]),{19:250,26:$VA,34:61},o($Vv,[2,23]),{12:$V51,29:251,31:$Vo1,33:222,79:$V61},{26:[1,252]},o($VE,[2,107]),o($Vi1,[2,103],{22:$VF,51:$VG,52:$VH,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT,67:$VU,68:$VV,69:$VW,70:$VX,71:$VY,72:$VZ,73:$V_,74:$V$}),o($VE,[2,106]),o($VE,[2,110]),o($Vy,[2,42]),{19:253,26:$VA,34:61},o($Vy,[2,15]),o($Vy,[2,17]),o($Vy,[2,12]),o($V31,[2,25]),o($V31,$V41,{33:110,32:254,12:$V51,79:$V61}),o($Vy,[2,14]),{28:[1,255],30:$Vf1},o($V31,[2,26])],
defaultActions: {44:[2,1],57:[2,111]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/* ignore comment */
break;
case 2:/* ignore comment */
break;
case 3:return yy_.yytext;
break;
case 4:return yy_.yytext;
break;
case 5:return yy_.yytext;
break;
case 6:return yy_.yytext;
break;
case 7:return yy_.yytext;
break;
case 8:return yy_.yytext;
break;
case 9:return yy_.yytext;
break;
case 10:return yy_.yytext;
break;
case 11:return yy_.yytext;
break;
case 12:return yy_.yytext;
break;
case 13:return yy_.yytext;
break;
case 14:return yy_.yytext;
break;
case 15:return yy_.yytext;
break;
case 16:return yy_.yytext;
break;
case 17:return yy_.yytext;
break;
case 18:return yy_.yytext;
break;
case 19:return yy_.yytext;
break;
case 20:return yy_.yytext;
break;
case 21:return yy_.yytext;
break;
case 22:return yy_.yytext;
break;
case 23:return yy_.yytext;
break;
case 24:return yy_.yytext;
break;
case 25:return yy_.yytext;
break;
case 26:return yy_.yytext;
break;
case 27:return yy_.yytext;
break;
case 28:return yy_.yytext;
break;
case 29:return yy_.yytext;
break;
case 30:return yy_.yytext;
break;
case 31:return yy_.yytext;
break;
case 32:return yy_.yytext;
break;
case 33:return yy_.yytext;
break;
case 34:return yy_.yytext;
break;
case 35:return yy_.yytext;
break;
case 36:return yy_.yytext;
break;
case 37:return yy_.yytext;
break;
case 38:return yy_.yytext;
break;
case 39:return yy_.yytext;
break;
case 40:return yy_.yytext;
break;
case 41:return 20;
break;
case 42:return 15;
break;
case 43:return 87;
break;
case 44:return 24;
break;
case 45:return 38;
break;
case 46:return 40;
break;
case 47:return 41;
break;
case 48:return 48;
break;
case 49:return 49;
break;
case 50:return 43;
break;
case 51:return 45;
break;
case 52:return 47;
break;
case 53:return 46;
break;
case 54:return 11;
break;
case 55:return 14;
break;
case 56:return 25;
break;
case 57:return 31;
break;
case 58:return 77;
break;
case 59:return 78;
break;
case 60:return 79;
break;
case 61:return 80;
break;
case 62:return 81;
break;
case 63:return 88;
break;
case 64:return 85;
break;
case 65:return 12;
break;
case 66:return 86;
break;
case 67:return 'ROBOCOP';
break;
case 68:return 5;
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:\/\*[\w\W]*?\*\/)/,/^(?:\.\.\.)/,/^(?:\.\.)/,/^(?:::)/,/^(?:==)/,/^(?:!=)/,/^(?:\$=)/,/^(?:!\$=)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:=>)/,/^(?:=)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:<)/,/^(?:>)/,/^(?::)/,/^(?:\.)/,/^(?:;)/,/^(?:,)/,/^(?:@)/,/^(?:SPC\b)/,/^(?:TAB\b)/,/^(?:NL\b)/,/^(?:!)/,/^(?:~)/,/^(?:scoped\b)/,/^(?:fn\b)/,/^(?:new\b)/,/^(?:class\b)/,/^(?:return\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:loop\b)/,/^(?:while\b)/,/^(?:package\b)/,/^(?:active\b)/,/^(?:data\b)/,/^(?:state\b)/,/^(?:([0-9])+)/,/^(?:([0-9])+\.([0-9])+)/,/^(?:"[\w\W]*?")/,/^(?:'[\w\W]*?')/,/^(?:true|false\b)/,/^(?:\$([a-zA-Z_][a-zA-Z_0-9]*))/,/^(?:([a-zA-Z_][a-zA-Z_0-9]*)!)/,/^(?:([a-zA-Z_][a-zA-Z_0-9]*))/,/^(?:`[^`]*`)/,/^(?:.)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}