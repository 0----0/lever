/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[1,23],$V2=[1,8],$V3=[1,17],$V4=[1,28],$V5=[1,18],$V6=[1,19],$V7=[1,41],$V8=[1,10],$V9=[1,11],$Va=[1,12],$Vb=[1,14],$Vc=[1,15],$Vd=[1,16],$Ve=[1,26],$Vf=[1,29],$Vg=[1,40],$Vh=[1,39],$Vi=[1,31],$Vj=[1,32],$Vk=[1,33],$Vl=[1,34],$Vm=[1,35],$Vn=[1,36],$Vo=[1,37],$Vp=[1,38],$Vq=[1,22],$Vr=[1,24],$Vs=[1,25],$Vt=[1,27],$Vu=[5,10,11,13,14,15,19,23,24,30,32,33,35,38,39,40,44,46,55,60,68,69,70,71,72,73,74,80,81,82,83],$Vv=[2,47],$Vw=[1,50],$Vx=[5,10,11,13,14,15,19,23,24,25,30,32,33,35,38,39,40,44,46,55,60,68,69,70,71,72,73,74,80,81,82,83],$Vy=[1,55],$Vz=[1,58],$VA=[1,60],$VB=[1,62],$VC=[1,61],$VD=[17,21,24,25,29,42,44,45,46,47,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67],$VE=[1,81],$VF=[1,83],$VG=[1,66],$VH=[1,67],$VI=[1,68],$VJ=[1,69],$VK=[1,70],$VL=[1,71],$VM=[1,72],$VN=[1,73],$VO=[1,74],$VP=[1,75],$VQ=[1,76],$VR=[1,77],$VS=[1,78],$VT=[1,79],$VU=[1,80],$VV=[1,82],$VW=[1,84],$VX=[1,85],$VY=[1,86],$VZ=[1,87],$V_=[1,88],$V$=[2,105],$V01=[1,103],$V11=[2,44],$V21=[25,42],$V31=[1,108],$V41=[1,109],$V51=[1,111],$V61=[5,10,11,13,14,15,17,19,21,23,24,25,29,30,32,33,35,38,39,40,41,42,44,45,46,47,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,80,81,82,83],$V71=[17,42],$V81=[17,21,24,25,29,42,44,46,47,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67],$V91=[1,162],$Va1=[17,42,56],$Vb1=[1,164],$Vc1=[17,42,47],$Vd1=[1,172],$Ve1=[11,14,15,24,25,30,32,33,35,38,39,40,44,46,55,60,68,69,70,71,72,73,74,80,81,82,83],$Vf1=[17,24,25,29,42,46,47],$Vg1=[17,24,25,29,42,46,47,49,50,51,52,53,54],$Vh1=[17,24,25,29,42,46,47,49,50,51,52,53,54,55,56,57,58],$Vi1=[17,24,25,29,42,44,46,47,49,50,51,52,53,54,55,56,57,58,59,60,63,64,65,66,67],$Vj1=[17,24,25,29,42,44,46,47,49,50,51,52,53,54,55,56,57,58,63,64,65,66,67],$Vk1=[14,19,25];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"start":3,"decl_list":4,"EOF":5,"decl":6,"stmt":7,"fn_decl":8,"class_decl":9,"package":10,"var_local":11,"block_fn_only":12,"active":13,"fn":14,"(":15,"ident_list":16,")":17,"block":18,"scoped":19,"::":20,"/":21,"fn_decl_list":22,"class":23,"{":24,"}":25,"block_non_empty":26,"stmt_list":27,"stmt_expr":28,";":29,"return":30,"expr":31,"break":32,"continue":33,"if_stmt":34,"for":35,"var":36,"in":37,"while":38,"loop":39,"if":40,"else":41,",":42,"expr_list":43,"@":44,".":45,"[":46,"]":47,"constant_value":48,"&&":49,"||":50,"==":51,"!=":52,"$=":53,"!$=":54,"<":55,">":56,"<=":57,">=":58,"+":59,"-":60,"*":61,"%":62,"SPC":63,"TAB":64,"NL":65,"..":66,"...":67,"!":68,"~":69,"integer":70,"float":71,"string":72,"tagged_string":73,"boolean":74,"=>":75,"map_pair_list":76,"map_pair":77,":":78,"=":79,"macro_name":80,"ts_fence":81,"new":82,"var_global":83,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:"package",11:"var_local",13:"active",14:"fn",15:"(",17:")",19:"scoped",20:"::",21:"/",23:"class",24:"{",25:"}",29:";",30:"return",32:"break",33:"continue",35:"for",37:"in",38:"while",39:"loop",40:"if",41:"else",42:",",44:"@",45:".",46:"[",47:"]",49:"&&",50:"||",51:"==",52:"!=",53:"$=",54:"!$=",55:"<",56:">",57:"<=",58:">=",59:"+",60:"-",61:"*",62:"%",63:"SPC",64:"TAB",65:"NL",66:"..",67:"...",68:"!",69:"~",70:"integer",71:"float",72:"string",73:"tagged_string",74:"boolean",75:"=>",78:":",79:"=",80:"macro_name",81:"ts_fence",82:"new",83:"var_global"},
productions_: [0,[3,2],[4,1],[4,2],[6,1],[6,1],[6,1],[6,3],[6,4],[8,6],[8,5],[8,7],[8,3],[8,8],[8,7],[8,5],[8,7],[8,6],[8,4],[22,1],[22,2],[9,3],[18,2],[18,1],[26,3],[12,2],[12,3],[27,1],[27,2],[7,2],[7,2],[7,3],[7,2],[7,2],[7,1],[7,5],[7,7],[7,3],[7,2],[34,5],[34,5],[34,3],[16,1],[16,3],[43,0],[43,1],[43,3],[31,1],[31,3],[31,1],[31,2],[31,3],[31,4],[31,1],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,2],[31,2],[31,2],[48,1],[48,1],[48,1],[48,1],[48,1],[48,4],[48,5],[48,3],[48,4],[48,5],[48,3],[48,3],[76,0],[76,1],[76,3],[77,3],[77,3],[28,3],[28,5],[28,6],[28,4],[28,4],[28,6],[28,6],[28,1],[28,5],[28,6],[36,1],[36,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2: case 19: case 27: case 42: case 45: case 91:
 this.$ = [$$[$0]]; 
break;
case 3: case 20: case 28:
 this.$ = $$[$0-1]; $$[$0-1].push($$[$0]); 
break;
case 4: case 5: case 6: case 23: case 34: case 47: case 49: case 53:
 this.$ = $$[$0]; 
break;
case 7:
 this.$ = {type: "package-decl", name: $$[$0-1], body: $$[$0], active: false}; 
break;
case 8:
 this.$ = {type: "package-decl", name: $$[$0-1], body: $$[$0], active: true}; 
break;
case 9:
 this.$ = {type: "fn-stmt", name: $$[$0-4], args: $$[$0-2], body: $$[$0]}; 
break;
case 10:
 this.$ = {type: "fn-stmt", name: $$[$0-3], args: [], body: $$[$0]}; 
break;
case 11:
 this.$ = {type: "fn-stmt", name: $$[$0-4], args: $$[$0-2], body: $$[$0], scoped: true}; 
break;
case 12:
 this.$ = {type: "fn-stmt", name: $$[$0-1], args: [], body: $$[$0]}; 
break;
case 13:
 this.$ = {type: "fn-stmt", name: $$[$0-6] + $$[$0-5] + $$[$0-4], args: $$[$0-2], body: $$[$0]}; 
break;
case 14:
 this.$ = {type: "fn-stmt", name: $$[$0-5] + $$[$0-4] + $$[$0-3], args: [], body: $$[$0]}; 
break;
case 15:
 this.$ = {type: "fn-stmt", name: $$[$0-3] + $$[$0-2] + $$[$0-1], args: [], body: $$[$0]}; 
break;
case 16:

            $$[$0-2].unshift("client");
            this.$ = {type: "fn-stmt", name: "serverCmd" + $$[$0-4], args: $$[$0-2], body: $$[$0]}; 
break;
case 17:
 this.$ = {type: "fn-stmt", name: "serverCmd" + $$[$0-3], args: ["client"], body: $$[$0]}; 
break;
case 18:
 this.$ = {type: "fn-stmt", name: "serverCmd" + $$[$0-1], args: ["client"], body: $$[$0]}; 
break;
case 21:
 this.$ = {type: "class-decl", name: $$[$0-1], body: $$[$0]}; 
break;
case 22: case 25: case 44: case 90:
 this.$ = []; 
break;
case 24: case 26:
 this.$ = $$[$0-1]; 
break;
case 29:
 this.$ = {type: "expr-stmt", expr: $$[$0-1]}; 
break;
case 30:
 this.$ = {type: "return-stmt", expr: null}; 
break;
case 31:
 this.$ = {type: "return-stmt", expr: $$[$0-1]}; 
break;
case 32:
 this.$ = {type: "break-stmt"}; 
break;
case 33:
 this.$ = {type: "continue-stmt"}; 
break;
case 35:
 this.$ = {type: "foreach-stmt", "bind": $$[$0-3], "iter": $$[$0-1], body: $$[$0]}; 
break;
case 36:
 this.$ = {type: "foreach-stmt", "bind": $$[$0-5], "iter": $$[$0-3], body: $$[$0-2]}; 
break;
case 37:
 this.$ = {type: "while-stmt", "cond": $$[$0-1], body: $$[$0]}; 
break;
case 38:
 this.$ = {type: "loop-stmt", body: $$[$0]}; 
break;
case 39: case 40:
 this.$ = {type: "if-stmt", "cond": $$[$0-3], body: $$[$0-2], "else": $$[$0]}; 
break;
case 41:
 this.$ = {type: "if-stmt", "cond": $$[$0-1], body: $$[$0], "else": null}; 
break;
case 43: case 46: case 92:
 this.$ = $$[$0-2]; $$[$0-2].push($$[$0]); 
break;
case 48:
 this.$ = {type: "expr-expr", expr: $$[$0-1]}; 
break;
case 50:
 this.$ = {type: "identifier", name: $$[$0]}; 
break;
case 51:
 this.$ = {type: "field-get", expr: $$[$0-2], name: $$[$0]}; 
break;
case 52:
 this.$ = {type: "array-get", expr: $$[$0-3], "array": $$[$0-1]}; 
break;
case 54: case 55: case 56: case 57: case 58: case 59: case 60: case 61: case 62: case 63: case 64: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72:
 this.$ = {type: "binary", op: $$[$0-1], lhs: $$[$0-2], rhs: $$[$0]}; 
break;
case 73:

            this.$ = {
                type: "call",
                name: "range",
                args: [$$[$0-2], $$[$0]]
            };
        
break;
case 74:

            this.$ = {
                type: "call",
                name: "range",
                args: [
                    $$[$0-2],
                    {
                        type: "binary",
                        op: "+",
                        lhs: $$[$0],
                        rhs: {
                            type: "constant",
                            "what": "integer",
                            "value": "1"
                        }
                    }
                ]
            };
        
break;
case 75: case 76: case 77:
 this.$ = {type: "unary", op: $$[$0-1], expr: $$[$0]}; 
break;
case 78:
 this.$ = {type: "constant", what: "integer", value: $$[$0]}; 
break;
case 79:
 this.$ = {type: "constant", what: "float", value: $$[$0]}; 
break;
case 80:
 this.$ = {type: "constant", what: "string", value: $$[$0].substring(1, $$[$0].length-1)}; 
break;
case 81:
 this.$ = {type: "constant", what: "tagged_string", value: $$[$0].substring(1, $$[$0].length-1)}; 
break;
case 82:
 this.$ = {type: "constant", what: "boolean", value: $$[$0]}; 
break;
case 83:
 this.$ = {type: "lambda", args: [], body: $$[$0]}; 
break;
case 84:
 this.$ = {type: "lambda", args: $$[$0-2], body: $$[$0]}; 
break;
case 85:
 this.$ = {type: "lambda", args: [$$[$0-2]], body: [{type: "return-stmt", expr: $$[$0]}]}; 
break;
case 86:
 this.$ = {type: "lambda", args: [], body: [{type: "return-stmt", expr: $$[$0]}]}; 
break;
case 87:
 this.$ = {type: "lambda", args: $$[$0-3], body: [{type: "return-stmt", expr: $$[$0]}]}; 
break;
case 88:
 this.$ = {type: "create-vec", values: $$[$0-1]}; 
break;
case 89:
 this.$ = {type: "create-map", pairs: $$[$0-1]}; 
break;
case 93:
 this.$ = [{type: "constant", what: "string", value: $$[$0-2]}, $$[$0]]; 
break;
case 94:
 this.$ = [{type: "constant", what: "string", value: $$[$0-2].substring(1, $$[$0-2].length-1)}, $$[$0]]; 
break;
case 95:
 this.$ = {type: "assign", "var": $$[$0-2], rhs: $$[$0]}; 
break;
case 96:
 this.$ = {type: "field-set", expr: $$[$0-4], name: $$[$0-2], rhs: $$[$0]}; 
break;
case 97:
 this.$ = {type: "array-set", expr: $$[$0-5], "array": $$[$0-3], rhs: $$[$0]}; 
break;
case 98:
 this.$ = {type: "macro-call", name: $$[$0-3], args: $$[$0-1]}; 
break;
case 99: case 104:
 this.$ = {type: "call", name: $$[$0-3], args: $$[$0-1]}; 
break;
case 100:
 this.$ = {type: "call", name: $$[$0-3], scope: $$[$0-5], args: $$[$0-1]}; 
break;
case 101:
 this.$ = {type: "call", name: $$[$0-3], target: $$[$0-5], args: $$[$0-1]}; 
break;
case 102:
 this.$ = {type: "ts-fence-expr", code: $$[$0].substring(1, $$[$0].length-1)}; 
break;
case 103:
 this.$ = {type: "new-object", class: $$[$0-3], args: $$[$0-1]}; 
break;
case 105:
 this.$ = {type: "variable", global: false, name: $$[$0]}; 
break;
case 106:
 this.$ = {type: "variable", global: true, name: $$[$0].substr(1)}; 
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:$V0,11:$V1,13:$V2,14:$V3,15:$V4,19:$V5,23:$V6,24:$V7,28:9,30:$V8,31:21,32:$V9,33:$Va,34:13,35:$Vb,36:20,38:$Vc,39:$Vd,40:$Ve,44:$Vf,46:$Vg,48:30,55:$Vh,60:$Vi,68:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn,73:$Vo,74:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt},{1:[3]},{5:[1,42],6:43,7:4,8:5,9:6,10:$V0,11:$V1,13:$V2,14:$V3,15:$V4,19:$V5,23:$V6,24:$V7,28:9,30:$V8,31:21,32:$V9,33:$Va,34:13,35:$Vb,36:20,38:$Vc,39:$Vd,40:$Ve,44:$Vf,46:$Vg,48:30,55:$Vh,60:$Vi,68:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn,73:$Vo,74:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt},o($Vu,[2,2]),o($Vu,[2,4]),o($Vu,[2,5]),o($Vu,[2,6]),{11:[1,44]},{10:[1,45]},o([21,44,45,46,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67],$Vv,{29:[1,46]}),{11:$V1,14:$Vw,15:$V4,24:$V7,28:49,29:[1,47],31:48,36:20,44:$Vf,46:$Vg,48:30,55:$Vh,60:$Vi,68:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn,73:$Vo,74:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt},{29:[1,51]},{29:[1,52]},o($Vx,[2,34]),{11:$Vy,15:[1,54],36:53,83:$Vt},{11:$V1,14:$Vw,15:$V4,24:$V7,28:49,31:56,36:20,44:$Vf,46:$Vg,48:30,55:$Vh,60:$Vi,68:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn,73:$Vo,74:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt},{18:57,24:$Vz,26:59},{11:$VA,15:$VB,21:$VC},{14:[1,63]},{11:[1,64]},o($VD,[2,49],{79:[1,65]}),{21:$VE,44:$VF,45:$VG,46:$VH,49:$VI,50:$VJ,51:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,57:$VQ,58:$VR,59:$VS,60:$VT,61:$VU,62:$VV,63:$VW,64:$VX,65:$VY,66:$VZ,67:$V_},{15:[1,89]},o([17,21,24,25,29,42,44,45,46,47,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,79],$V$,{15:[1,90],20:[1,91],75:[1,92]}),o($VD,[2,102]),{11:[1,93],23:[1,94]},{11:$V1,14:$Vw,15:$V4,24:$V7,28:49,31:95,36:20,44:$Vf,46:$Vg,48:30,55:$Vh,60:$Vi,68:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn,73:$Vo,74:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt},o([17,21,24,25,29,37,42,44,45,46,47,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,79],[2,106]),{11:$V1,14:$Vw,15:$V4,17:[1,97],24:$V7,28:49,31:96,36:20,44:$Vf,46:$Vg,48:30,55:$Vh,60:$Vi,68:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn,73:$Vo,74:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt},{11:[1,98]},o($VD,[2,53]),{11:$V1,14:$Vw,15:$V4,24:$V7,28:49,31:99,36:20,44:$Vf,46:$Vg,48:30,55:$Vh,60:$Vi,68:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn,73:$Vo,74:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt},{11:$V1,14:$Vw,15:$V4,24:$V7,28:49,31:100,36:20,44:$Vf,46:$Vg,48:30,55:$Vh,60:$Vi,68:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn,73:$Vo,74:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt},{11:$V1,14:$Vw,15:$V4,24:$V7,28:49,31:101,36:20,44:$Vf,46:$Vg,48:30,55:$Vh,60:$Vi,68:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn,73:$Vo,74:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt},o($VD,[2,78]),o($VD,[2,79]),o($VD,[2,80]),o($VD,[2,81]),o($VD,[2,82]),{11:$V01,16:102},o([42,47],$V11,{36:20,48:30,28:49,43:104,31:105,11:$V1,14:$Vw,15:$V4,24:$V7,44:$Vf,46:$Vg,55:$Vh,60:$Vi,68:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn,73:$Vo,74:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt}),o($V21,[2,90],{76:106,77:107,11:$V31,72:$V41}),{1:[2,1]},o($Vu,[2,3]),{12:110,24:$V51},{11:[1,112]},o($Vx,[2,29]),o($Vx,[2,30]),{21:$VE,29:[1,113],44:$VF,45:$VG,46:$VH,49:$VI,50:$VJ,51:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,57:$VQ,58:$VR,59:$VS,60:$VT,61:$VU,62:$VV,63:$VW,64:$VX,65:$VY,66:$VZ,67:$V_},o($VD,$Vv),{15:$VB},o($Vx,[2,32]),o($Vx,[2,33]),{37:[1,114]},{11:$Vy,36:115,83:$Vt},{37:$V$},{18:116,21:$VE,24:$Vz,26:59,44:$VF,45:$VG,46:$VH,49:$VI,50:$VJ,51:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,57:$VQ,58:$VR,59:$VS,60:$VT,61:$VU,62:$VV,63:$VW,64:$VX,65:$VY,66:$VZ,67:$V_},o($Vx,[2,38]),{7:119,11:$V1,14:$Vw,15:$V4,24:$V7,25:[1,117],27:118,28:9,30:$V8,31:21,32:$V9,33:$Va,34:13,35:$Vb,36:20,38:$Vc,39:$Vd,40:$Ve,44:$Vf,46:$Vg,48:30,55:$Vh,60:$Vi,68:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn,73:$Vo,74:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt},o($V61,[2,23]),{15:[1,120],18:121,20:[1,122],24:$Vz,26:59},{11:[1,123]},{11:$V01,16:125,17:[1,124]},{11:[1,126]},{12:127,24:$V51},{11:$V1,14:$Vw,15:$V4,24:$V7,28:49,31:128,36:20,44:$Vf,46:$Vg,48:30,55:$Vh,60:$Vi,68:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn,73:$Vo,74:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt},{11:[1,129]},{11:$V1,14:$Vw,15:$V4,24:$V7,28:49,31:130,36:20,44:$Vf,46:$Vg,48:30,55:$Vh,60:$Vi,68:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn,73:$Vo,74:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt},{11:$V1,14:$Vw,15:$V4,24:$V7,28:49,31:131,36:20,44:$Vf,46:$Vg,48:30,55:$Vh,60:$Vi,68:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn,73:$Vo,74:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt},{11:$V1,14:$Vw,15:$V4,24:$V7,28:49,31:132,36:20,44:$Vf,46:$Vg,48:30,55:$Vh,60:$Vi,68:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn,73:$Vo,74:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt},{11:$V1,14:$Vw,15:$V4,24:$V7,28:49,31:133,36:20,44:$Vf,46:$Vg,48:30,55:$Vh,60:$Vi,68:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn,73:$Vo,74:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt},{11:$V1,14:$Vw,15:$V4,24:$V7,28:49,31:134,36:20,44:$Vf,46:$Vg,48:30,55:$Vh,60:$Vi,68:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn,73:$Vo,74:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt},{11:$V1,14:$Vw,15:$V4,24:$V7,28:49,31:135,36:20,44:$Vf,46:$Vg,48:30,55:$Vh,60:$Vi,68:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn,73:$Vo,74:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt},{11:$V1,14:$Vw,15:$V4,24:$V7,28:49,31:136,36:20,44:$Vf,46:$Vg,48:30,55:$Vh,60:$Vi,68:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn,73:$Vo,74:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt},{11:$V1,14:$Vw,15:$V4,24:$V7,28:49,31:137,36:20,44:$Vf,46:$Vg,48:30,55:$Vh,60:$Vi,68:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn,73:$Vo,74:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt},{11:$V1,14:$Vw,15:$V4,24:$V7,28:49,31:138,36:20,44:$Vf,46:$Vg,48:30,55:$Vh,60:$Vi,68:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn,73:$Vo,74:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt},{11:$V1,14:$Vw,15:$V4,24:$V7,28:49,31:139,36:20,44:$Vf,46:$Vg,48:30,55:$Vh,60:$Vi,68:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn,73:$Vo,74:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt},{11:$V1,14:$Vw,15:$V4,24:$V7,28:49,31:140,36:20,44:$Vf,46:$Vg,48:30,55:$Vh,60:$Vi,68:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn,73:$Vo,74:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt},{11:$V1,14:$Vw,15:$V4,24:$V7,28:49,31:141,36:20,44:$Vf,46:$Vg,48:30,55:$Vh,60:$Vi,68:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn,73:$Vo,74:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt},{11:$V1,14:$Vw,15:$V4,24:$V7,28:49,31:142,36:20,44:$Vf,46:$Vg,48:30,55:$Vh,60:$Vi,68:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn,73:$Vo,74:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt},{11:$V1,14:$Vw,15:$V4,24:$V7,28:49,31:143,36:20,44:$Vf,46:$Vg,48:30,55:$Vh,60:$Vi,68:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn,73:$Vo,74:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt},{11:$V1,14:$Vw,15:$V4,24:$V7,28:49,31:144,36:20,44:$Vf,46:$Vg,48:30,55:$Vh,60:$Vi,68:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn,73:$Vo,74:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt},{11:$V1,14:$Vw,15:$V4,24:$V7,28:49,31:145,36:20,44:$Vf,46:$Vg,48:30,55:$Vh,60:$Vi,68:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn,73:$Vo,74:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt},{11:$V1,14:$Vw,15:$V4,24:$V7,28:49,31:146,36:20,44:$Vf,46:$Vg,48:30,55:$Vh,60:$Vi,68:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn,73:$Vo,74:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt},{11:$V1,14:$Vw,15:$V4,24:$V7,28:49,31:147,36:20,44:$Vf,46:$Vg,48:30,55:$Vh,60:$Vi,68:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn,73:$Vo,74:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt},{11:$V1,14:$Vw,15:$V4,24:$V7,28:49,31:148,36:20,44:$Vf,46:$Vg,48:30,55:$Vh,60:$Vi,68:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn,73:$Vo,74:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt},{11:$V1,14:$Vw,15:$V4,24:$V7,28:49,31:149,36:20,44:$Vf,46:$Vg,48:30,55:$Vh,60:$Vi,68:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn,73:$Vo,74:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt},{11:$V1,14:$Vw,15:$V4,24:$V7,28:49,31:150,36:20,44:$Vf,46:$Vg,48:30,55:$Vh,60:$Vi,68:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn,73:$Vo,74:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt},{11:$V1,14:$Vw,15:$V4,24:$V7,28:49,31:151,36:20,44:$Vf,46:$Vg,48:30,55:$Vh,60:$Vi,68:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn,73:$Vo,74:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt},o($V71,$V11,{36:20,48:30,28:49,31:105,43:152,11:$V1,14:$Vw,15:$V4,24:$V7,44:$Vf,46:$Vg,55:$Vh,60:$Vi,68:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn,73:$Vo,74:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt}),o($V71,$V11,{36:20,48:30,28:49,31:105,43:153,11:$V1,14:$Vw,15:$V4,24:$V7,44:$Vf,46:$Vg,55:$Vh,60:$Vi,68:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn,73:$Vo,74:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt}),{11:[1,154]},{11:$V1,14:$Vw,15:$V4,24:$V7,28:49,31:155,36:20,44:$Vf,46:$Vg,48:30,55:$Vh,60:$Vi,68:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn,73:$Vo,74:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt},{15:[1,156]},{11:[1,157]},{18:158,21:$VE,24:$Vz,26:59,44:$VF,45:$VG,46:$VH,49:$VI,50:$VJ,51:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,57:$VQ,58:$VR,59:$VS,60:$VT,61:$VU,62:$VV,63:$VW,64:$VX,65:$VY,66:$VZ,67:$V_},{17:[1,159],21:$VE,44:$VF,45:$VG,46:$VH,49:$VI,50:$VJ,51:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,57:$VQ,58:$VR,59:$VS,60:$VT,61:$VU,62:$VV,63:$VW,64:$VX,65:$VY,66:$VZ,67:$V_},{75:[1,160]},o($VD,[2,50]),o($V81,[2,75],{45:$VG}),o($V81,[2,76],{45:$VG}),o($V81,[2,77],{45:$VG}),{42:$V91,56:[1,161]},o($Va1,[2,42]),{42:$Vb1,47:[1,163]},o($Vc1,[2,45],{21:$VE,44:$VF,45:$VG,46:$VH,49:$VI,50:$VJ,51:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,57:$VQ,58:$VR,59:$VS,60:$VT,61:$VU,62:$VV,63:$VW,64:$VX,65:$VY,66:$VZ,67:$V_}),{25:[1,165],42:[1,166]},o($V21,[2,91]),{78:[1,167]},{78:[1,168]},o($Vu,[2,7]),{8:171,14:$Vd1,19:$V5,22:170,25:[1,169]},{12:173,24:$V51},o($Vx,[2,31]),{11:$V1,14:$Vw,15:$V4,24:$V7,28:49,31:174,36:20,44:$Vf,46:$Vg,48:30,55:$Vh,60:$Vi,68:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn,73:$Vo,74:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt},{37:[1,175]},o($Vx,[2,37]),o($V61,[2,22]),{7:177,11:$V1,14:$Vw,15:$V4,24:$V7,25:[1,176],28:9,30:$V8,31:21,32:$V9,33:$Va,34:13,35:$Vb,36:20,38:$Vc,39:$Vd,40:$Ve,44:$Vf,46:$Vg,48:30,55:$Vh,60:$Vi,68:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn,73:$Vo,74:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt},o($Ve1,[2,27]),{11:$V01,16:178,17:[1,179]},o($Vx,[2,12]),{11:[1,180]},{15:[1,181],18:182,24:$Vz,26:59},{18:183,24:$Vz,26:59},{17:[1,184],42:$V91},{15:[1,185]},o($Vu,[2,21]),o($Vf1,[2,95],{21:$VE,44:$VF,45:$VG,49:$VI,50:$VJ,51:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,57:$VQ,58:$VR,59:$VS,60:$VT,61:$VU,62:$VV,63:$VW,64:$VX,65:$VY,66:$VZ,67:$V_}),o($VD,[2,51],{15:[1,187],79:[1,186]}),{21:$VE,44:$VF,45:$VG,46:$VH,47:[1,188],49:$VI,50:$VJ,51:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,57:$VQ,58:$VR,59:$VS,60:$VT,61:$VU,62:$VV,63:$VW,64:$VX,65:$VY,66:$VZ,67:$V_},o([17,24,25,29,42,46,47,49,50],[2,54],{21:$VE,44:$VF,45:$VG,51:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,57:$VQ,58:$VR,59:$VS,60:$VT,61:$VU,62:$VV,63:$VW,64:$VX,65:$VY,66:$VZ,67:$V_}),o([17,24,25,29,42,46,47,50],[2,55],{21:$VE,44:$VF,45:$VG,49:$VI,51:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,57:$VQ,58:$VR,59:$VS,60:$VT,61:$VU,62:$VV,63:$VW,64:$VX,65:$VY,66:$VZ,67:$V_}),o($Vg1,[2,56],{21:$VE,44:$VF,45:$VG,55:$VO,56:$VP,57:$VQ,58:$VR,59:$VS,60:$VT,61:$VU,62:$VV,63:$VW,64:$VX,65:$VY,66:$VZ,67:$V_}),o($Vg1,[2,57],{21:$VE,44:$VF,45:$VG,55:$VO,56:$VP,57:$VQ,58:$VR,59:$VS,60:$VT,61:$VU,62:$VV,63:$VW,64:$VX,65:$VY,66:$VZ,67:$V_}),o($Vg1,[2,58],{21:$VE,44:$VF,45:$VG,55:$VO,56:$VP,57:$VQ,58:$VR,59:$VS,60:$VT,61:$VU,62:$VV,63:$VW,64:$VX,65:$VY,66:$VZ,67:$V_}),o($Vg1,[2,59],{21:$VE,44:$VF,45:$VG,55:$VO,56:$VP,57:$VQ,58:$VR,59:$VS,60:$VT,61:$VU,62:$VV,63:$VW,64:$VX,65:$VY,66:$VZ,67:$V_}),o($Vh1,[2,60],{21:$VE,44:$VF,45:$VG,59:$VS,60:$VT,61:$VU,62:$VV,63:$VW,64:$VX,65:$VY,66:$VZ,67:$V_}),o($Vh1,[2,61],{21:$VE,44:$VF,45:$VG,59:$VS,60:$VT,61:$VU,62:$VV,63:$VW,64:$VX,65:$VY,66:$VZ,67:$V_}),o($Vh1,[2,62],{21:$VE,44:$VF,45:$VG,59:$VS,60:$VT,61:$VU,62:$VV,63:$VW,64:$VX,65:$VY,66:$VZ,67:$V_}),o($Vh1,[2,63],{21:$VE,44:$VF,45:$VG,59:$VS,60:$VT,61:$VU,62:$VV,63:$VW,64:$VX,65:$VY,66:$VZ,67:$V_}),o($Vi1,[2,64],{21:$VE,45:$VG,61:$VU,62:$VV}),o($Vi1,[2,65],{21:$VE,45:$VG,61:$VU,62:$VV}),o($V81,[2,66],{45:$VG}),o($V81,[2,67],{45:$VG}),o($V81,[2,68],{45:$VG}),o($Vj1,[2,69],{21:$VE,45:$VG,59:$VS,60:$VT,61:$VU,62:$VV}),o($Vj1,[2,70],{21:$VE,45:$VG,59:$VS,60:$VT,61:$VU,62:$VV}),o($Vj1,[2,71],{21:$VE,45:$VG,59:$VS,60:$VT,61:$VU,62:$VV}),o($Vj1,[2,72],{21:$VE,45:$VG,59:$VS,60:$VT,61:$VU,62:$VV}),o($Vj1,[2,73],{21:$VE,45:$VG,59:$VS,60:$VT,61:$VU,62:$VV}),o($Vj1,[2,74],{21:$VE,45:$VG,59:$VS,60:$VT,61:$VU,62:$VV}),{17:[1,189],42:$Vb1},{17:[1,190],42:$Vb1},{15:[1,191]},o($Vf1,[2,85],{21:$VE,44:$VF,45:$VG,49:$VI,50:$VJ,51:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,57:$VQ,58:$VR,59:$VS,60:$VT,61:$VU,62:$VV,63:$VW,64:$VX,65:$VY,66:$VZ,67:$V_}),o($V71,$V11,{36:20,48:30,28:49,31:105,43:192,11:$V1,14:$Vw,15:$V4,24:$V7,44:$Vf,46:$Vg,55:$Vh,60:$Vi,68:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn,73:$Vo,74:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt}),{15:[1,193]},o($Vx,[2,41],{41:[1,194]}),o($VD,[2,48]),{11:$V1,14:$Vw,15:$V4,24:$V7,28:49,31:195,36:20,44:$Vf,46:$Vg,48:30,55:$Vh,60:$Vi,68:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn,73:$Vo,74:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt},{75:[1,196]},{11:[1,197]},o($VD,[2,88]),{11:$V1,14:$Vw,15:$V4,24:$V7,28:49,31:198,36:20,44:$Vf,46:$Vg,48:30,55:$Vh,60:$Vi,68:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn,73:$Vo,74:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt},o($VD,[2,89]),{11:$V31,72:$V41,77:199},{11:$V1,14:$Vw,15:$V4,24:$V7,28:49,31:200,36:20,44:$Vf,46:$Vg,48:30,55:$Vh,60:$Vi,68:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn,73:$Vo,74:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt},{11:$V1,14:$Vw,15:$V4,24:$V7,28:49,31:201,36:20,44:$Vf,46:$Vg,48:30,55:$Vh,60:$Vi,68:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn,73:$Vo,74:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt},o($Vu,[2,25]),{8:203,14:$Vd1,19:$V5,25:[1,202]},o($Vk1,[2,19]),{11:$VA,21:$VC},o($Vu,[2,8]),{18:204,21:$VE,24:$Vz,26:59,44:$VF,45:$VG,46:$VH,49:$VI,50:$VJ,51:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,57:$VQ,58:$VR,59:$VS,60:$VT,61:$VU,62:$VV,63:$VW,64:$VX,65:$VY,66:$VZ,67:$V_},{17:[1,205]},o($V61,[2,24]),o($Ve1,[2,28]),{17:[1,206],42:$V91},{18:207,24:$Vz,26:59},{15:[1,208],18:209,24:$Vz,26:59},{11:$V01,16:210,17:[1,211]},o($Vx,[2,18]),o($VD,[2,83]),{18:212,24:$Vz,26:59},{11:$V01,16:213},{11:$V1,14:$Vw,15:$V4,24:$V7,28:49,31:214,36:20,44:$Vf,46:$Vg,48:30,55:$Vh,60:$Vi,68:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn,73:$Vo,74:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt},o($V71,$V11,{36:20,48:30,28:49,31:105,43:215,11:$V1,14:$Vw,15:$V4,24:$V7,44:$Vf,46:$Vg,55:$Vh,60:$Vi,68:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn,73:$Vo,74:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt}),o($VD,[2,52],{79:[1,216]}),o($VD,[2,98]),o($VD,[2,99]),o($V71,$V11,{36:20,48:30,28:49,31:105,43:217,11:$V1,14:$Vw,15:$V4,24:$V7,44:$Vf,46:$Vg,55:$Vh,60:$Vi,68:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn,73:$Vo,74:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt}),{17:[1,218],42:$Vb1},o($V71,$V11,{36:20,48:30,28:49,31:105,43:219,11:$V1,14:$Vw,15:$V4,24:$V7,44:$Vf,46:$Vg,55:$Vh,60:$Vi,68:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn,73:$Vo,74:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt}),{18:221,24:$Vz,26:59,34:220,40:$Ve},o($Vf1,[2,86],{21:$VE,44:$VF,45:$VG,49:$VI,50:$VJ,51:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,57:$VQ,58:$VR,59:$VS,60:$VT,61:$VU,62:$VV,63:$VW,64:$VX,65:$VY,66:$VZ,67:$V_}),{11:$V1,14:$Vw,15:$V4,24:$V7,28:49,31:222,36:20,44:$Vf,46:$Vg,48:30,55:$Vh,60:$Vi,68:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn,73:$Vo,74:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt},o($Va1,[2,43]),o($Vc1,[2,46],{21:$VE,44:$VF,45:$VG,46:$VH,49:$VI,50:$VJ,51:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,57:$VQ,58:$VR,59:$VS,60:$VT,61:$VU,62:$VV,63:$VW,64:$VX,65:$VY,66:$VZ,67:$V_}),o($V21,[2,92]),o($V21,[2,93],{21:$VE,44:$VF,45:$VG,46:$VH,49:$VI,50:$VJ,51:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,57:$VQ,58:$VR,59:$VS,60:$VT,61:$VU,62:$VV,63:$VW,64:$VX,65:$VY,66:$VZ,67:$V_}),o($V21,[2,94],{21:$VE,44:$VF,45:$VG,46:$VH,49:$VI,50:$VJ,51:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,57:$VQ,58:$VR,59:$VS,60:$VT,61:$VU,62:$VV,63:$VW,64:$VX,65:$VY,66:$VZ,67:$V_}),o($Vu,[2,26]),o($Vk1,[2,20]),o($Vx,[2,35]),{11:$V1,14:$Vw,15:$V4,24:$V7,28:49,31:223,36:20,44:$Vf,46:$Vg,48:30,55:$Vh,60:$Vi,68:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn,73:$Vo,74:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt},{18:224,24:$Vz,26:59},o($Vx,[2,10]),{11:$V01,16:225,17:[1,226]},o($Vx,[2,15]),{17:[1,227],42:$V91},{18:228,24:$Vz,26:59},o($VD,[2,84]),{17:[1,229],42:$V91},o($VD,[2,96]),{17:[1,230],42:$Vb1},{11:$V1,14:$Vw,15:$V4,24:$V7,28:49,31:231,36:20,44:$Vf,46:$Vg,48:30,55:$Vh,60:$Vi,68:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn,73:$Vo,74:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt},{17:[1,232],42:$Vb1},o($VD,[2,103]),{17:[1,233],42:$Vb1},o($Vx,[2,39]),o($Vx,[2,40]),o($Vh1,[2,87],{21:$VE,44:$VF,45:$VG,59:$VS,60:$VT,61:$VU,62:$VV,63:$VW,64:$VX,65:$VY,66:$VZ,67:$V_}),{18:234,21:$VE,24:$Vz,26:59,44:$VF,45:$VG,46:$VH,49:$VI,50:$VJ,51:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,57:$VQ,58:$VR,59:$VS,60:$VT,61:$VU,62:$VV,63:$VW,64:$VX,65:$VY,66:$VZ,67:$V_},o($Vx,[2,9]),{17:[1,235],42:$V91},{18:236,24:$Vz,26:59},{18:237,24:$Vz,26:59},o($Vx,[2,17]),{18:238,24:$Vz,26:59},o($VD,[2,101]),o($Vf1,[2,97],{21:$VE,44:$VF,45:$VG,49:$VI,50:$VJ,51:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,57:$VQ,58:$VR,59:$VS,60:$VT,61:$VU,62:$VV,63:$VW,64:$VX,65:$VY,66:$VZ,67:$V_}),o($VD,[2,100]),o($VD,[2,104]),o($Vx,[2,36]),{18:239,24:$Vz,26:59},o($Vx,[2,14]),o($Vx,[2,16]),o($Vx,[2,11]),o($Vx,[2,13])],
defaultActions: {42:[2,1],55:[2,105]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/* ignore comment */
break;
case 2:/* ignore comment */
break;
case 3:return yy_.yytext;
break;
case 4:return yy_.yytext;
break;
case 5:return yy_.yytext;
break;
case 6:return yy_.yytext;
break;
case 7:return yy_.yytext;
break;
case 8:return yy_.yytext;
break;
case 9:return yy_.yytext;
break;
case 10:return yy_.yytext;
break;
case 11:return yy_.yytext;
break;
case 12:return yy_.yytext;
break;
case 13:return yy_.yytext;
break;
case 14:return yy_.yytext;
break;
case 15:return yy_.yytext;
break;
case 16:return yy_.yytext;
break;
case 17:return yy_.yytext;
break;
case 18:return yy_.yytext;
break;
case 19:return yy_.yytext;
break;
case 20:return yy_.yytext;
break;
case 21:return yy_.yytext;
break;
case 22:return yy_.yytext;
break;
case 23:return yy_.yytext;
break;
case 24:return yy_.yytext;
break;
case 25:return yy_.yytext;
break;
case 26:return yy_.yytext;
break;
case 27:return yy_.yytext;
break;
case 28:return yy_.yytext;
break;
case 29:return yy_.yytext;
break;
case 30:return yy_.yytext;
break;
case 31:return yy_.yytext;
break;
case 32:return yy_.yytext;
break;
case 33:return yy_.yytext;
break;
case 34:return yy_.yytext;
break;
case 35:return yy_.yytext;
break;
case 36:return yy_.yytext;
break;
case 37:return yy_.yytext;
break;
case 38:return yy_.yytext;
break;
case 39:return yy_.yytext;
break;
case 40:return yy_.yytext;
break;
case 41:return 19;
break;
case 42:return 14;
break;
case 43:return 82;
break;
case 44:return 23;
break;
case 45:return 30;
break;
case 46:return 32;
break;
case 47:return 33;
break;
case 48:return 40;
break;
case 49:return 41;
break;
case 50:return 35;
break;
case 51:return 37;
break;
case 52:return 39;
break;
case 53:return 38;
break;
case 54:return 10;
break;
case 55:return 13;
break;
case 56:return 'datablock';
break;
case 57:return 70;
break;
case 58:return 71;
break;
case 59:return 72;
break;
case 60:return 73;
break;
case 61:return 74;
break;
case 62:return 83;
break;
case 63:return 80;
break;
case 64:return 11;
break;
case 65:return 81;
break;
case 66:return 'ROBOCOP';
break;
case 67:return 5;
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:\/\*[\w\W]*?\*\/)/,/^(?:\.\.\.)/,/^(?:\.\.)/,/^(?:::)/,/^(?:==)/,/^(?:!=)/,/^(?:\$=)/,/^(?:!\$=)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:=>)/,/^(?:=)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:<)/,/^(?:>)/,/^(?::)/,/^(?:\.)/,/^(?:;)/,/^(?:,)/,/^(?:@)/,/^(?:SPC\b)/,/^(?:TAB\b)/,/^(?:NL\b)/,/^(?:!)/,/^(?:~)/,/^(?:scoped\b)/,/^(?:fn\b)/,/^(?:new\b)/,/^(?:class\b)/,/^(?:return\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:loop\b)/,/^(?:while\b)/,/^(?:package\b)/,/^(?:active\b)/,/^(?:datablock\b)/,/^(?:([0-9])+)/,/^(?:([0-9])+\.([0-9])+)/,/^(?:"[\w\W]*?")/,/^(?:'[\w\W]*?')/,/^(?:true|false\b)/,/^(?:\$([a-zA-Z_][a-zA-Z_0-9]*))/,/^(?:([a-zA-Z_][a-zA-Z_0-9]*)!)/,/^(?:([a-zA-Z_][a-zA-Z_0-9]*))/,/^(?:`[^`]*`)/,/^(?:.)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}